{"version":3,"sources":["../src/Endpoint.ts"],"names":["DeviceEventEmitter","NativeModules","EventEmitter","Call","Message","Account","Endpoint","constructor","addListener","_onRegistrationChanged","bind","_onCallReceived","_onCallChanged","_onCallTerminated","_onCallScreenLocked","_onMessageReceived","_onConnectivityChanged","start","configuration","Promise","resolve","reject","PjSipModule","successful","data","accounts","calls","hasOwnProperty","d","push","extra","key","stop","updateStunServers","accountId","stunServerList","changeNetworkConfiguration","changeServiceConfiguration","createAccount","replaceAccount","account","Error","registerAccount","renew","getId","deleteAccount","getAccounts","getAccount","makeCall","destination","callSettings","msgData","_normalize","answerCall","call","hangupCall","declineCall","holdCall","unholdCall","muteCall","unMuteCall","useSpeaker","useEarpiece","xferCall","xferReplacesCall","destCall","redirectCall","dtmfCall","digits","activateAudioSession","deactivateAudioSession","changeOrientation","orientation","orientations","indexOf","JSON","stringify","join","changeCodecSettings","codecSettings","emit","lock","available","startsWith","realm","getRegServer","getDomain"],"mappings":"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","sourcesContent":["import React, {DeviceEventEmitter, NativeModules} from 'react-native';\nimport {EventEmitter} from 'events'\n\nimport Call, { CallData } from './Call'\nimport Message, { MessageData } from './Message'\nimport Account, { AccountConfiguration } from './Account'\n\nexport type EndpointConfiguration = {\n\n}\n\n/**\n * SIP headers object, where each key is a header name and value is a header value.\n * Example:\n * {\n *   \"X-Custom-Header\": \"Test Header Value\",\n *   \"X-Custom-ID\": \"Awesome Header\"\n * }\n *\n * @typedef {Object} PjSipHdrList\n */\n\n/**\n * An additional information to be sent with outgoing SIP message.\n * It can (optionally) be specified for example\n * with #Endpoint.makeCall(), #Endpoint.answerCall(), #Endpoint.hangupCall(),\n * #Endpoint.holdCall() and many more.\n *\n * @typedef {Object} PjSipMsgData\n * @property {String} target_uri - Indicates whether the Courage component is present.\n * @property {PjSipHdrList} hdr_list - Additional message headers as linked list.\n * @property {String} content_type - MIME type of optional message body.\n * @property {String} msg_body - MIME type of optional message body.\n */\n\n/**\n * An additional information to be sent with outgoing SIP message.\n * It can (optionally) be specified for example\n * with #Endpoint.makeCall(), #Endpoint.answerCall(), #Endpoint.hangupCall(),\n * #Endpoint.holdCall() and many more.\n *\n * @typedef {Object} PjSipCallSetttings\n * @property {number} flag - Bitmask of #pjsua_call_flag constants.\n * @property {number} req_keyframe_method - This flag controls what methods to request keyframe are allowed on the call.\n * @property {number} aud_cnt - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n * @property {number} vid_cnt - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n */\n\nexport default class Endpoint extends EventEmitter {\n\n    constructor() {\n        super();\n\n        // Subscribe to Accounts events\n        DeviceEventEmitter.addListener('pjSipRegistrationChanged', this._onRegistrationChanged.bind(this));\n\n        // Subscribe to Calls events\n        DeviceEventEmitter.addListener('pjSipCallReceived', this._onCallReceived.bind(this));\n        DeviceEventEmitter.addListener('pjSipCallChanged', this._onCallChanged.bind(this));\n        DeviceEventEmitter.addListener('pjSipCallTerminated', this._onCallTerminated.bind(this));\n        DeviceEventEmitter.addListener('pjSipCallScreenLocked', this._onCallScreenLocked.bind(this));\n        DeviceEventEmitter.addListener('pjSipMessageReceived', this._onMessageReceived.bind(this));\n        DeviceEventEmitter.addListener('pjSipConnectivityChanged', this._onConnectivityChanged.bind(this));\n    }\n\n    /**\n     * Returns a Promise that will be resolved once PjSip module is initialized.\n     * Do not call any function while library is not initialized.\n     *\n     * @returns {Promise}\n     */\n    start(configuration: EndpointConfiguration): Promise<{\n        accounts: Account[],\n        calls: Call[],\n    }> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.start(configuration, (successful, data) => {\n                if (successful) {\n                    let accounts = [];\n                    let calls = [];\n\n                    if (data.hasOwnProperty('accounts')) {\n                        for (let d of data['accounts']) {\n                            accounts.push(new Account(d));\n                        }\n                    }\n\n                    if (data.hasOwnProperty('calls')) {\n                        for (let d of data['calls']) {\n                            calls.push(new Call(d));\n                        }\n                    }\n\n                    let extra = {};\n\n                    for (let key in data) {\n                        if (data.hasOwnProperty(key) && key != \"accounts\" && key != \"calls\") {\n                            extra[key] = data[key];\n                        }\n                    }\n\n                    resolve({\n                        accounts,\n                        calls,\n                        ...extra\n                    });\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    stop(): Promise<void> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.stop((successful, data) => {\n                resolve(data);\n            });\n            resolve();\n        });\n    }\n\n    updateStunServers(accountId: number, stunServerList: string[]): Promise<any> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.updateStunServers(accountId, stunServerList, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            })\n        })\n    }\n\n    /**\n     * @param configuration\n     * @returns {Promise}\n     */\n    changeNetworkConfiguration(configuration: any): Promise<any> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.changeNetworkConfiguration(configuration, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param configuration\n     * @returns {Promise}\n     */\n    changeServiceConfiguration(configuration: any): Promise<any> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.changeServiceConfiguration(configuration, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Add a new account. If registration is configured for this account, this function would also start the\n     * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n     * internally by the library, and application doesn't need to do anything to maintain the registration session.\n     *\n     * An example configuration:\n     * {\n     *   name: \"John Doe\",\n     *   username: \"100\",\n     *   domain: \"pbx.com\",\n     *   password: \"XXXXXX\",\n     *\n     *   proxy: \"192.168.100.1:5060\", // default disabled.\n     *   transport: \"TCP\", // default TCP\n     *   regServer: \"pbx.com\", // default taken from domain\n     *   regTimeout: 300, // default 300\n     * }\n     *\n     * @param {Object} configuration\n     * @returns {Promise}\n     */\n    createAccount(configuration: AccountConfiguration): Promise<Account> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.createAccount(configuration, (successful, data) => {\n                if (successful) {\n                    resolve(new Account(data));\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    replaceAccount(account: Account, configuration: AccountConfiguration): void {\n        throw new Error(\"Not implemented\");\n    }\n\n    /**\n     * Update registration or perform unregistration.\n     * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n     * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n     *\n     * @param {Account} account\n     * @param bool renew If renew argument is zero, this will start unregistration process.\n     * @returns {Promise}\n     */\n    registerAccount(account: Account, renew = true): Promise<any> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.registerAccount(account.getId(), renew, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n     *\n     * @param {Account} account\n     * @returns {Promise}\n     */\n    deleteAccount(account: Account): Promise<any> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.deleteAccount(account.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Gets list of all accounts\n     *\n     * @returns {Promise}\n     */\n    getAccounts(): Promise<Account[]> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.getAccounts((successful, data) => {\n                if (successful) {\n                    let accounts = [];\n\n                    for (let d of data) {\n                        accounts.push(new Account(d));\n                    }\n\n                    resolve(accounts);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Gets an account by id\n     *\n     * @returns {Promise}\n     */\n    getAccount(accountId: number): Promise<Account> {\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.getAccount(accountId, (successful, data) => {\n                if (successful) {\n                    resolve(new Account(data));\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Make an outgoing call to the specified URI.\n     * Available call settings:\n     * - audioCount - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n     * - videoCount - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n     * -\n     *\n     * @param account {Account}\n     * @param destination {String} Destination SIP URI.\n     * @param callSettings {PjSipCallSetttings} Outgoing call settings.\n     * @param msgSettings {PjSipMsgData} Outgoing call additional information to be sent with outgoing SIP message.\n     */\n    makeCall(account: Account, destination: string, callSettings?: any, msgData?: any): Promise<Call> {\n        destination = this._normalize(account, destination);\n\n        return new Promise(function(resolve, reject) {\n            NativeModules.PjSipModule.makeCall(account.getId(), destination, callSettings, msgData, (successful, data) => {\n                if (successful) {\n                    resolve(new Call(data));\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Send response to incoming INVITE request.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    answerCall(call: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.answerCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Hangup call by using method that is appropriate according to the call state.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    hangupCall(call: Call): Promise<any> {\n        // TODO: Add possibility to pass code and reason for hangup.\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.hangupCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Hangup call by using Decline (603) method.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    declineCall(call: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.declineCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    holdCall(call: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.holdCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    unholdCall(call: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.unholdCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    muteCall(call: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.muteCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    unMuteCall(call: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.unMuteCall(call.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    useSpeaker(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.useSpeaker((successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    useEarpiece(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.useEarpiece((successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Initiate call transfer to the specified address.\n     * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n     *\n     * @param account {Account} Account associated with call.\n     * @param call {Call} The call to be transferred.\n     * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n     * @returns {Promise}\n     */\n    xferCall(account: Account, call: Call, destination: string): Promise<any> {\n        destination = this._normalize(account, destination);\n\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.xferCall(call.getId(), destination, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Initiate attended call transfer.\n     * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n     * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n     *\n     * @param call {Call} The call to be transferred.\n     * @param destCall {Call} The call to be transferred.\n     * @returns {Promise}\n     */\n    xferReplacesCall(call: Call, destCall: Call): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.xferReplacesCall(call.getId(), destCall.getId(), (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Redirect (forward) specified call to destination.\n     * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n     *\n     * @param account {Account} Account associated with call.\n     * @param call {Call} The call to be transferred.\n     * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n     * @returns {Promise}\n     */\n    redirectCall(account: Account, call: Call, destination: string): Promise<any> {\n        destination = this._normalize(account, destination);\n\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.redirectCall(call.getId(), destination, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * Send DTMF digits to remote using RFC 2833 payload formats.\n     *\n     * @param call {Call} Call instance\n     * @param digits {String} DTMF string digits to be sent as described on RFC 2833 section 3.10.\n     * @returns {Promise}\n     */\n    dtmfCall(call: Call, digits: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.dtmfCall(call.getId(), digits, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    activateAudioSession(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.activateAudioSession((successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    deactivateAudioSession(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            NativeModules.PjSipModule.deactivateAudioSession((successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    changeOrientation(orientation: (\n        'PJMEDIA_ORIENT_UNKNOWN'\n        | 'PJMEDIA_ORIENT_ROTATE_90DEG'\n        | 'PJMEDIA_ORIENT_ROTATE_270DEG'\n        | 'PJMEDIA_ORIENT_ROTATE_180DEG'\n        | 'PJMEDIA_ORIENT_NATURAL'\n    )): void {\n      const orientations = [\n        'PJMEDIA_ORIENT_UNKNOWN',\n        'PJMEDIA_ORIENT_ROTATE_90DEG',\n        'PJMEDIA_ORIENT_ROTATE_270DEG',\n        'PJMEDIA_ORIENT_ROTATE_180DEG',\n        'PJMEDIA_ORIENT_NATURAL'\n      ]\n\n      if (orientations.indexOf(orientation) === -1) {\n        throw new Error(`Invalid ${JSON.stringify(orientation)} device orientation, but expected ${orientations.join(\", \")} values`)\n      }\n\n      NativeModules.PjSipModule.changeOrientation(orientation)\n    }\n\n    changeCodecSettings(codecSettings: {\n        'opus/48000/2'?: number,\n        'G722/16000/1'?: number,\n        'G7221/16000/1'?: number,\n        'G7221/32000/1'?: number,\n        'GSM/8000/1'?: number,\n        'PCMA/8000/1'?: number,\n        'PCMU/8000/1'?: number,\n        'iLBC/8000/1'?: number,\n        'speex/8000/1'?: number,\n        'speex/16000/1'?: number,\n        'speex/32000/1'?: number,\n    }): Promise<any> {\n        return new Promise(function(resolve, reject) {\n        NativeModules.PjSipModule.changeCodecSettings(codecSettings, (successful, data) => {\n                if (successful) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        });\n    }\n\n    /**\n     * @fires Endpoint#registration_changed\n     * @private\n     * @param data {Object}\n     */\n    _onRegistrationChanged(data: AccountConfiguration): void {\n        /**\n         * Fires when registration status has changed.\n         *\n         * @event Endpoint#registration_changed\n         * @property {Account} account\n         */\n        this.emit(\"registration_changed\", new Account(data));\n    }\n\n    /**\n     * @fires Endpoint#call_received\n     * @private\n     * @param data {Object}\n     */\n    _onCallReceived(data: CallData): void {\n        /**\n         * TODO\n         *\n         * @event Endpoint#call_received\n         * @property {Call} call\n         */\n        this.emit(\"call_received\", new Call(data));\n    }\n\n    /**\n     * @fires Endpoint#call_changed\n     * @private\n     * @param data {Object}\n     */\n    _onCallChanged(data: CallData): void {\n        /**\n         * TODO\n         *\n         * @event Endpoint#call_changed\n         * @property {Call} call\n         */\n        this.emit(\"call_changed\", new Call(data));\n    }\n\n    /**\n     * @fires Endpoint#call_terminated\n     * @private\n     * @param data {Object}\n     */\n    _onCallTerminated(data: CallData): void {\n        /**\n         * TODO\n         *\n         * @event Endpoint#call_terminated\n         * @property {Call} call\n         */\n        this.emit(\"call_terminated\", new Call(data));\n    }\n\n    /**\n     * @fires Endpoint#call_screen_locked\n     * @private\n     * @param lock bool\n     */\n    _onCallScreenLocked(lock: boolean): void {\n        /**\n         * TODO\n         *\n         * @event Endpoint#call_screen_locked\n         * @property bool lock\n         */\n        this.emit(\"call_screen_locked\", lock);\n    }\n\n    /**\n     * @fires Endpoint#message_received\n     * @private\n     * @param data {Object}\n     */\n    _onMessageReceived(data: MessageData): void {\n        /**\n         * TODO\n         *\n         * @event Endpoint#message_received\n         * @property {Message} message\n         */\n        this.emit(\"message_received\", new Message(data));\n    }\n\n    /**\n     * @fires Endpoint#connectivity_changed\n     * @private\n     * @param available bool\n     */\n    _onConnectivityChanged(available: boolean): void {\n        /**\n         * @event Endpoint#connectivity_changed\n         * @property bool available True if connectivity matches current Network settings, otherwise false.\n         */\n        this.emit(\"connectivity_changed\", available);\n    }\n\n    /**\n     * Normalize Destination URI\n     *\n     * @param account\n     * @param destination {string}\n     * @returns {string}\n     * @private\n     */\n    _normalize(account: Account, destination: string): string {\n        if (!destination.startsWith(\"sip:\")) {\n            let realm = account.getRegServer();\n\n            if (!realm) {\n                realm = account.getDomain();\n                /*let s = realm.indexOf(\":\");\n\n                if (s > 0) {\n                    realm = realm.substr(0, s + 1);\n                }*/\n            }\n\n            destination = \"sip:\" + destination + \"@\" + realm;\n        }\n\n        return destination;\n    }\n    // setUaConfig(UaConfig value)\n    // setMaxCalls\n    // setUserAgent\n    // setNatTypeInSdp\n\n    // setLogConfig(LogConfig value)\n    // setLevel\n}\n"],"file":"Endpoint.js"}