{"version":3,"sources":["../src/AccountRegistration.ts"],"names":["AccountRegistration","constructor","status","statusText","active","reason","_status","_statusText","_active","_reason","getStatus","getStatusText","isActive","getReason","toJson"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,MAAMA,mBAAN,CAA0B;AAMrCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B,GAAD,EAAuC;AAC9C,SAAKC,OAAL,GAAeJ,MAAf;AACA,SAAKK,WAAL,GAAmBJ,UAAnB;AACA,SAAKK,OAAL,GAAeJ,MAAf;AACA,SAAKK,OAAL,GAAeJ,MAAf;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,SAAS,GAAkB;AACvB,WAAO,KAAKJ,OAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIK,EAAAA,aAAa,GAAkB;AAC3B,WAAO,KAAKJ,WAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,QAAQ,GAAY;AAChB,WAAO,KAAKJ,OAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIK,EAAAA,SAAS,GAAkB;AACvB,WAAO,KAAKJ,OAAZ;AACH;;AAEDK,EAAAA,MAAM,GAKJ;AACE,WAAQ;AACJZ,MAAAA,MAAM,EAAE,KAAKI,OADT;AAEJH,MAAAA,UAAU,EAAE,KAAKI,WAFb;AAGJH,MAAAA,MAAM,EAAE,KAAKI,OAHT;AAIJH,MAAAA,MAAM,EAAE,KAAKI;AAJT,KAAR;AAMH;;AAhEoC","sourcesContent":["/**\n * Account registration information. Application can query the registration info\n * by calling account.getRegistration().\n */\nexport default class AccountRegistration {\n    _status: string;\n    _statusText: string;\n    _active: boolean;\n    _reason: string;\n\n    constructor({status, statusText, active, reason}) {\n        this._status = status;\n        this._statusText = statusText;\n        this._active = active;\n        this._reason = reason;\n    }\n\n    /**\n     * Last registration status code (SIP status codes according to RFC 3261).\n     * If status code is empty, the account is currently not registered. Any other value indicates the SIP\n     * status code of the registration.\n     *\n     * @returns {string|null}\n     */\n    getStatus(): string | null {\n        return this._status;\n    }\n\n    /**\n     * String describing the registration status.\n     *\n     * @returns {string|null}\n     */\n    getStatusText(): string | null {\n        return this._statusText;\n    }\n\n    /**\n     * Flag to tell whether this account is currently registered\n     * (has active registration session).\n     *\n     * @returns boolean\n     */\n    isActive(): boolean {\n        return this._active;\n    }\n\n    /**\n     * Reason phrase received.\n     *\n     * @returns {String|null}\n     */\n    getReason(): string | null {\n        return this._reason;\n    }\n\n    toJson(): {\n        status: string,\n        statusText: string,\n        active: boolean,\n        reason: string,\n    } {\n        return  {\n            status: this._status,\n            statusText: this._statusText,\n            active: this._active,\n            reason: this._reason\n        }\n    }\n}"],"file":"AccountRegistration.js"}