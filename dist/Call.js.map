{"version":3,"sources":["../src/Call.ts"],"names":["v4","uuidv4","CallState","Call","constructor","id","callId","accountId","localContact","localUri","remoteContact","remoteUri","state","stateText","held","muted","speaker","connectDuration","totalDuration","remoteOfferer","remoteAudioCount","remoteVideoCount","audioCount","videoCount","lastStatusCode","lastReason","media","provisionalMedia","remoteNumber","remoteName","match","uuidN","_uuid","undefined","_id","_callId","_accountId","_localContact","_localUri","_remoteContact","_remoteUri","_state","_stateText","_held","_muted","_speaker","_connectDuration","_totalDuration","_remoteOfferer","_remoteAudioCount","_remoteVideoCount","_remoteNumber","_remoteName","_audioCount","_videoCount","_lastStatusCode","_lastReason","_media","_provisionalMedia","_constructionTime","Math","round","Date","getTime","getId","getAccountId","getCallId","getTotalDuration","time","offset","getConnectDuration","getFormattedTotalDuration","_formatTime","getFormattedConnectDuration","getLocalContact","getLocalUri","getRemoteContact","getRemoteUri","getRemoteName","getRemoteNumber","getRemoteFormattedNumber","getState","getStateText","isHeld","isMuted","isSpeaker","isTerminated","getRemoteOfferer","getRemoteAudioCount","getRemoteVideoCount","getAudioCount","getVideoCount","getLastStatusCode","getLastReason","getUuid","getMedia","getProvisionalMedia","seconds","isNaN","hours","parseInt","String","minutes","result"],"mappings":"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","sourcesContent":["import 'react-native-get-random-values';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport enum CallState {\n    PJSIP_INV_STATE_NULL = 'PJSIP_INV_STATE_NULL',\n    PJSIP_INV_STATE_CALLING = 'PJSIP_INV_STATE_CALLING',\n    PJSIP_INV_STATE_INCOMING = 'PJSIP_INV_STATE_INCOMING',\n    PJSIP_INV_STATE_EARLY = 'PJSIP_INV_STATE_EARLY',\n    PJSIP_INV_STATE_CONNECTING = 'PJSIP_INV_STATE_CONNECTING',\n    PJSIP_INV_STATE_CONFIRMED = 'PJSIP_INV_STATE_CONFIRMED',\n    PJSIP_INV_STATE_DISCONNECTED = 'PJSIP_INV_STATE_DISCONNECTED',\n};\n\nexport type CallData = {\n    id: number\n    callId: string\n    accountId: number\n    localContact: string\n    localUri: string\n    remoteContact: string\n    remoteUri: string\n    state: CallState\n    stateText: string\n    held: boolean\n    muted: boolean\n    speaker: boolean\n    connectDuration: number\n    totalDuration: number\n    remoteOfferer: number\n    remoteAudioCount: number\n    remoteVideoCount: number\n    remoteNumber: string\n    remoteName: string\n    audioCount: number\n    videoCount: number\n    lastStatusCode: string\n    lastReason: string\n    media: string\n    provisionalMedia: string\n    uuid: string,\n}\n\n/**\n * This class describes the information and current status of a call.\n */\nclass Call {\n\n    _id: number;\n    _callId: string;\n    _accountId: number;\n    _localContact: string;\n    _localUri: string;\n    _remoteContact: string;\n    _remoteUri: string;\n    _state: CallState;\n    _stateText: string;\n    _held: boolean;\n    _muted: boolean;\n    _speaker: boolean;\n    _connectDuration: number;\n    _totalDuration: number;\n    _remoteOfferer: number;\n    _remoteAudioCount: number;\n    _remoteVideoCount: number;\n    _remoteNumber: string;\n    _remoteName: string;\n    _audioCount: number;\n    _videoCount: number;\n    _lastStatusCode: string;\n    _lastReason: string;\n    _media: string;\n    _provisionalMedia: string;\n    _constructionTime: number;\n    _uuid: string;\n\n    constructor({\n                    id,\n                    callId,\n                    accountId,\n                    localContact,\n                    localUri,\n                    remoteContact,\n                    remoteUri,\n                    state,\n                    stateText,\n                    held,\n                    muted,\n                    speaker,\n                    connectDuration,\n                    totalDuration,\n                    remoteOfferer,\n                    remoteAudioCount,\n                    remoteVideoCount,\n                    audioCount,\n                    videoCount,\n                    lastStatusCode,\n                    lastReason,\n                    media,\n                    provisionalMedia,\n                }: CallData) {\n\n        let remoteNumber = null;\n        let remoteName = null;\n        if (remoteUri) {\n            let match = remoteUri.match(/\"([^\"]+)\" <sip:([^@]+)@/);\n            let uuidN = remoteUri.match(/uuid=(.+)>/);\n\n            if (uuidN) {\n                this._uuid = uuidN[1];\n            }\n\n            if (match) {\n                remoteName = match[1];\n                remoteNumber = match[2];\n            } else {\n                match = remoteUri.match(/sip:([^@]+)@/);\n\n                if (match) {\n                    remoteNumber = match[1];\n                }\n            }\n        }\n\n        if (this._uuid === undefined || this._uuid === null) {\n            this._uuid = uuidv4();\n        }\n\n        this._id = id;\n        this._callId = callId;\n        this._accountId = accountId;\n        this._localContact = localContact;\n        this._localUri = localUri;\n        this._remoteContact = remoteContact;\n        this._remoteUri = remoteUri;\n        this._state = state;\n        this._stateText = stateText;\n        this._held = held;\n        this._muted = muted;\n        this._speaker = speaker;\n        this._connectDuration = connectDuration;\n        this._totalDuration = totalDuration;\n        this._remoteOfferer = remoteOfferer;\n        this._remoteAudioCount = remoteAudioCount;\n        this._remoteVideoCount = remoteVideoCount;\n        this._remoteNumber = remoteNumber;\n        this._remoteName = remoteName;\n        this._audioCount = audioCount;\n        this._videoCount = videoCount;\n        this._lastStatusCode = lastStatusCode;\n        this._lastReason = lastReason;\n\n        this._media = media;\n        this._provisionalMedia = provisionalMedia;\n\n        this._constructionTime = Math.round(new Date().getTime() / 1000);\n    }\n\n    /**\n     * Call identification.\n     * @returns {int}\n     */\n    getId(): number {\n        return this._id;\n    }\n\n    /**\n     * The account ID where this call belongs.\n     * @returns {int}\n     */\n    getAccountId(): number {\n        return this._accountId;\n    }\n\n    /**\n     * Dialog Call-ID string.\n     *\n     * @returns {String}\n     */\n    getCallId(): string {\n        return this._callId;\n    }\n\n\n    /**\n     * Up-to-date call duration in seconds.\n     * Use local time to calculate actual call duration.\n     *\n     * @public\n     * @returns {int}\n     */\n    getTotalDuration(): number {\n        let time = Math.round(new Date().getTime() / 1000);\n        let offset = time - this._constructionTime;\n\n        return this._totalDuration + offset;\n    };\n\n    /**\n     * Up-to-date call connected duration (zero when call is not established)\n     *\n     * @returns {int}\n     */\n    getConnectDuration(): number {\n        if (this._connectDuration < 0 || this._state == \"PJSIP_INV_STATE_DISCONNECTED\") {\n            return this._connectDuration;\n        }\n\n        let time = Math.round(new Date().getTime() / 1000);\n        let offset = time - this._constructionTime;\n\n        return this._connectDuration + offset;\n    }\n\n    /**\n     * Call duration in \"MM:SS\" format.\n     *\n     * @public\n     * @returns {string}\n     */\n    getFormattedTotalDuration(): string {\n        return this._formatTime(this.getTotalDuration());\n    };\n\n    /**\n     * Call duration in \"MM:SS\" format.\n     *\n     * @public\n     * @returns {string}\n     */\n    getFormattedConnectDuration(): string {\n        return this._formatTime(this.getConnectDuration());\n    };\n\n    /**\n     * Local Contact.\n     * TODO: Provide example\n     * @returns {String}\n     */\n    getLocalContact(): string {\n        return this._localContact;\n    }\n\n    /**\n     * Local URI.\n     * TODO: Provide example\n     * @returns {String}\n     */\n    getLocalUri(): string {\n        return this._localUri;\n    }\n\n    /**\n     * Remote contact.\n     * TODO: Provide example\n     * @returns {String}\n     */\n    getRemoteContact(): string {\n        return this._remoteContact;\n    }\n\n    /**\n     * Remote URI.\n     * TODO: Provide example\n     * @returns {String}\n     */\n    getRemoteUri(): string {\n        return this._remoteUri;\n    }\n\n    /**\n     * Callee name. Could be null if no name specified in URI.\n     * @returns {String}\n     */\n    getRemoteName(): string {\n        return this._remoteName;\n    }\n\n    /**\n     * Callee number\n     * @returns {String}\n     */\n    getRemoteNumber(): string {\n        return this._remoteNumber;\n    }\n\n    /**\n     * @returns {String}\n     */\n    getRemoteFormattedNumber(): string {\n        if (this._remoteName && this._remoteNumber) {\n            return `${this._remoteName} <${this._remoteNumber}>`;\n        } else if (this._remoteNumber) {\n            return this._remoteNumber;\n        } else {\n            return this._remoteUri\n        }\n    }\n\n    /**\n     * Invite session state.\n     *\n     * PJSIP_INV_STATE_NULL           Before INVITE is sent or received\n     * PJSIP_INV_STATE_CALLING        After INVITE is sent\n     * PJSIP_INV_STATE_INCOMING       After INVITE is received.\n     * PJSIP_INV_STATE_EARLY          After response with To tag.\n     * PJSIP_INV_STATE_CONNECTING     After 2xx is sent/received.\n     * PJSIP_INV_STATE_CONFIRMED      After ACK is sent/received.\n     * PJSIP_INV_STATE_DISCONNECTED   Session is terminated.\n     *\n     * @returns {String}\n     */\n    getState(): CallState {\n        return this._state;\n    }\n\n    /**\n     * Text describing the state.\n     *\n     * @returns {String}\n     */\n    getStateText(): string {\n        return this._stateText;\n    }\n\n    isHeld(): boolean {\n        return this._held;\n    }\n\n    isMuted(): boolean {\n        return this._muted;\n    }\n\n    isSpeaker(): boolean {\n        return this._speaker;\n    }\n\n    isTerminated(): boolean {\n        return this._state === 'PJSIP_INV_STATE_DISCONNECTED';\n    }\n\n    /**\n     * Flag if remote was SDP offerer\n     * @returns {boolean}\n     */\n    getRemoteOfferer(): number {\n        // TODO Verify whether boolean value\n        return this._remoteOfferer;\n    }\n\n    /**\n     * Number of audio streams offered by remote.\n     * @returns {int}\n     */\n    getRemoteAudioCount(): number {\n        return this._remoteAudioCount;\n    }\n\n    /**\n     * Number of video streams offered by remote.\n     * @returns {int}\n     */\n    getRemoteVideoCount(): number {\n        return this._remoteVideoCount;\n    }\n\n    /**\n     * Number of simultaneous active audio streams for this call. If zero - audio is disabled in this call.\n     * @returns {int}\n     */\n    getAudioCount(): number {\n        return this._audioCount;\n    }\n\n    /**\n     * Number of simultaneous active video streams for this call. If zero - video is disabled in this call.\n     * @returns {*}\n     */\n    getVideoCount(): number {\n        return this._videoCount;\n    }\n\n    /**\n     * Last status code heard, which can be used as cause code.\n     * Possible values:\n     * - PJSIP_SC_TRYING / 100\n     * - PJSIP_SC_RINGING / 180\n     * - PJSIP_SC_CALL_BEING_FORWARDED / 181\n     * - PJSIP_SC_QUEUED / 182\n     * - PJSIP_SC_PROGRESS / 183\n     * - PJSIP_SC_OK / 200\n     * - PJSIP_SC_ACCEPTED / 202\n     * - PJSIP_SC_MULTIPLE_CHOICES / 300\n     * - PJSIP_SC_MOVED_PERMANENTLY / 301\n     * - PJSIP_SC_MOVED_TEMPORARILY / 302\n     * - PJSIP_SC_USE_PROXY / 305\n     * - PJSIP_SC_ALTERNATIVE_SERVICE / 380\n     * - PJSIP_SC_BAD_REQUEST / 400\n     * - PJSIP_SC_UNAUTHORIZED / 401\n     * - PJSIP_SC_PAYMENT_REQUIRED / 402\n     * - PJSIP_SC_FORBIDDEN / 403\n     * - PJSIP_SC_NOT_FOUND / 404\n     * - PJSIP_SC_METHOD_NOT_ALLOWED / 405\n     * - PJSIP_SC_NOT_ACCEPTABLE / 406\n     * - PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED / 407\n     * - PJSIP_SC_REQUEST_TIMEOUT / 408\n     * - PJSIP_SC_GONE / 410\n     * - PJSIP_SC_REQUEST_ENTITY_TOO_LARGE / 413\n     * - PJSIP_SC_REQUEST_URI_TOO_LONG / 414\n     * - PJSIP_SC_UNSUPPORTED_MEDIA_TYPE / 415\n     * - PJSIP_SC_UNSUPPORTED_URI_SCHEME / 416\n     * - PJSIP_SC_BAD_EXTENSION / 420\n     * - PJSIP_SC_EXTENSION_REQUIRED / 421\n     * - PJSIP_SC_SESSION_TIMER_TOO_SMALL / 422\n     * - PJSIP_SC_INTERVAL_TOO_BRIEF / 423\n     * - PJSIP_SC_TEMPORARILY_UNAVAILABLE / 480\n     * - PJSIP_SC_CALL_TSX_DOES_NOT_EXIST / 481\n     * - PJSIP_SC_LOOP_DETECTED / 482\n     * - PJSIP_SC_TOO_MANY_HOPS / 483\n     * - PJSIP_SC_ADDRESS_INCOMPLETE / 484\n     * - PJSIP_AC_AMBIGUOUS / 485\n     * - PJSIP_SC_BUSY_HERE / 486\n     * - PJSIP_SC_REQUEST_TERMINATED / 487\n     * - PJSIP_SC_NOT_ACCEPTABLE_HERE / 488\n     * - PJSIP_SC_BAD_EVENT / 489\n     * - PJSIP_SC_REQUEST_UPDATED / 490\n     * - PJSIP_SC_REQUEST_PENDING / 491\n     * - PJSIP_SC_UNDECIPHERABLE / 493\n     * - PJSIP_SC_INTERNAL_SERVER_ERROR / 500\n     * - PJSIP_SC_NOT_IMPLEMENTED / 501\n     * - PJSIP_SC_BAD_GATEWAY / 502\n     * - PJSIP_SC_SERVICE_UNAVAILABLE / 503\n     * - PJSIP_SC_SERVER_TIMEOUT / 504\n     * - PJSIP_SC_VERSION_NOT_SUPPORTED / 505\n     * - PJSIP_SC_MESSAGE_TOO_LARGE / 513\n     * - PJSIP_SC_PRECONDITION_FAILURE / 580\n     * - PJSIP_SC_BUSY_EVERYWHERE / 600\n     * - PJSIP_SC_DECLINE / 603\n     * - PJSIP_SC_DOES_NOT_EXIST_ANYWHERE / 604\n     * - PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE / 606\n     * - PJSIP_SC_TSX_TIMEOUT / PJSIP_SC_REQUEST_TIMEOUT\n     * - PJSIP_SC_TSX_TRANSPORT_ERROR / PJSIP_SC_SERVICE_UNAVAILABLE\n     *\n     * @returns {string}\n     */\n    getLastStatusCode(): string {\n        return this._lastStatusCode;\n    }\n\n    /**\n     * The reason phrase describing the last status.\n     *\n     * @returns {string}\n     */\n    getLastReason(): string {\n        return this._lastReason;\n    }\n\n    /**\n     * UUID for push notification\n     */\n    getUuid(): string {\n        return this._uuid;\n    }\n\n    getMedia(): string {\n        return this._media;\n    }\n\n    getProvisionalMedia(): string {\n        return this._provisionalMedia;\n    }\n\n    /**\n     * Format seconds to \"MM:SS\" format.\n     *\n     * @public\n     * @returns {string}\n     */\n    _formatTime(seconds: number): string {\n        if (isNaN(seconds) || seconds < 0) {\n            return \"00:00\";\n        }\n        var hours = parseInt(String(seconds/3600)) % 24;\n        var minutes = parseInt(String(seconds/60)) % 60;\n        var result = \"\";\n        seconds = seconds % 60;\n\n        if (hours > 0) {\n            result += (hours < 10 ? \"0\" + hours : hours) + \":\";\n        }\n\n        result += (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds  < 10 ? \"0\" + seconds : seconds);\n        return result;\n    };\n}\n\nexport { Call };\n\nexport default Call;\n"],"file":"Call.js"}